# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

resources:
  containers:
  - container: sqodotme
    image: python:3.7
  - container: postgres
    image: postgres:9.4
    env:
      POSTGRES_DB: url-shortener

container: sqodotme

services:
  postgres: postgres

steps:
- script: python -m venv venv
  displayName: '파이썬 가상환경 생성'

- script: |
    source venv/bin/activate
    pip install --upgrade pip setuptools wheel
  displayName: '파이썬 빌드 도구 업데이트'

- script: |
    source venv/bin/activate
    pip install -r requirements.txt
  displayName: '애플리케이션의 파이썬 의존성 설치'

- script: |
    source venv/bin/activate
    pip install flake8
    flake8 .
  displayName: 'Lint 실행'

- script: |
    source venv/bin/activate
    pip install pytest
    pip install pytest-cov
    pytest test --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
  displayName: '테스트 실행'
  env:
    URL_SHORTENER_PG_URI: postgresql://postgres@postgres/url-shortener

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: './'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    ArtifactName: 'drop'
    publishLocation: 'Container'
